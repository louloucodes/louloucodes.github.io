<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-19T00:02:52-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LouLou Codes</title><subtitle>Learning new skills at the tender age of &quot;none of your beeswax.&quot;  </subtitle><entry><title type="html">Automate Publishing Workflow</title><link href="http://localhost:4000/automation/2020/10/18/automating_publishing_task.html" rel="alternate" type="text/html" title="Automate Publishing Workflow" /><published>2020-10-18T00:00:00-04:00</published><updated>2020-10-18T00:00:00-04:00</updated><id>http://localhost:4000/automation/2020/10/18/automating_publishing_task</id><content type="html" xml:base="http://localhost:4000/automation/2020/10/18/automating_publishing_task.html">&lt;h1 id=&quot;automating-my-publishing-workflow&quot;&gt;Automating my publishing workflow…&lt;/h1&gt;

&lt;h3 id=&quot;adventures-in-tagging-continued&quot;&gt;Adventures in tagging, continued&lt;/h3&gt;

&lt;p&gt;My solution for tagging posts is the ‘jekyll-tagging’ plugin, which GitHub does not support. I discussed the workaround &lt;a href=&quot;https://louloucodes.github.io/2020/09/10/Adventures-in-Tagging-Part-2.html&quot;&gt;in this post&lt;/a&gt;, and outlined the steps I needed to make ensure that pages for new tags appear.&lt;/p&gt;

&lt;p&gt;There aren’t that many steps, but they are kind of annoying, so… I wrote a script to automate them.&lt;/p&gt;

&lt;p&gt;This is my first shell script and I am pleased with it :heart_eyes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#! /bin/sh

#automate workflow to publish blog post:
#  make sure new auto-generated tag pages are uploaded
#  add all, commit with message, and push to git

echo Enter commit message
read commit_message
echo Your message is ${commit_message}

pub_dir=~/my_path #I hardcoded this with the actual path

# remove current tag directory
rm -R ${pub_dir}/tag

# create tag directory
mkdir ${pub_dir}/tag

# copy everything from the _site/tag directory to tag
cp -R ${pub_dir}/_site/tag/* ${pub_dir}/tag/

# add, commit, and push
git add .
git commit -m &quot;${commit_message}&quot;
git push

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And a side note: I discovered that the tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLI&lt;/code&gt; isn’t working as I expect it to because the tagging process turns it into lowercase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cli&lt;/code&gt;. Which is great! But I have to figure out how to convert that. I’m sure it will be a straightforward, built-in function like Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lower()&lt;/code&gt; except in Ruby.&lt;/p&gt;</content><author><name>louloucodes</name></author><category term="automation" /><category term="automation" /><category term="shell" /><category term="git" /><category term="workflow" /><category term="tags" /><summary type="html">Automating my publishing workflow…</summary></entry><entry><title type="html">Directory Tree Generator Challenge – Customizing</title><link href="http://localhost:4000/python/2020/10/07/terminal-font-colors.html" rel="alternate" type="text/html" title="Directory Tree Generator Challenge -- Customizing" /><published>2020-10-07T00:00:00-04:00</published><updated>2020-10-07T00:00:00-04:00</updated><id>http://localhost:4000/python/2020/10/07/terminal-font-colors</id><content type="html" xml:base="http://localhost:4000/python/2020/10/07/terminal-font-colors.html">&lt;h1 id=&quot;directory-tree-generator-making-it-mine&quot;&gt;Directory Tree Generator: Making it mine&lt;/h1&gt;

&lt;p&gt;So one advantage of &lt;a href=&quot;https://louloucodes.github.io/python/2020/10/05/Real-Python-Project.html&quot;&gt;making this tool&lt;/a&gt; for myself is that I can make it do what I want and look how I want, and what I wanted was colorful printing to the terminal to help distinguish the files from the directories.&lt;/p&gt;

&lt;p&gt;The Real Python folks suggested the &lt;a href=&quot;https://pypi.org/project/colored/&quot;&gt;pypi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colored&lt;/code&gt; package&lt;/a&gt;, and I found it easy to implement. I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stylize&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fg&lt;/code&gt; (foreground), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr&lt;/code&gt; (attribute) functions to print in color and boldface to the terminal. There’s a great list of named colors – I was taken by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thistle_1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deep_pink_2&lt;/code&gt; – but any hex value color will work. I’m a big fan of Google’s color picker for finding hex values of shades I like.&lt;/p&gt;

&lt;p&gt;Of course, I won’t always want pink and thistle for my tree, so the user can choose what values to use for the files and the directories.&lt;/p&gt;

&lt;p&gt;After using my CLI tree for a couple of days, I recognized another customization that I would like to implement: organization fo the tree by level. Sometimes it would be useful to have this by date, or by size, or alphabetically. By the time I publish the code in my repo, I plan to have this customization implemented too.&lt;/p&gt;</content><author><name>louloucodes</name></author><category term="python" /><category term="python" /><category term="challenge" /><category term="project" /><category term="portfolio" /><category term="CLI" /><category term="recursion" /><summary type="html">Directory Tree Generator: Making it mine</summary></entry><entry><title type="html">Directory Tree Generator Challenge – Recursive Solution</title><link href="http://localhost:4000/python/2020/10/06/Recursive-traversing-directory-structure.html" rel="alternate" type="text/html" title="Directory Tree Generator Challenge -- Recursive Solution" /><published>2020-10-06T00:00:00-04:00</published><updated>2020-10-06T00:00:00-04:00</updated><id>http://localhost:4000/python/2020/10/06/Recursive-traversing-directory-structure</id><content type="html" xml:base="http://localhost:4000/python/2020/10/06/Recursive-traversing-directory-structure.html">&lt;h1 id=&quot;application-of-recursion&quot;&gt;Application of recursion&lt;/h1&gt;

&lt;p&gt;On first glance, I thought the hardest part of the &lt;a href=&quot;https://realpython.com/intermediate-python-project-ideas/#directory-tree-generator&quot;&gt;Directory Tree Generator challenge&lt;/a&gt; would be traversing the directory structure. My instincts turned out to be wrong, as I solved the general problem with the os package and a single, recursive function.&lt;/p&gt;

&lt;p&gt;The os package provides the functionality to explore the file structure, and in particular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;os.path.listdir&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;os.path.isdir&lt;/code&gt;. As I wrote it, the directory tree generator allows the user to choose which directory to be the root of the tree and how deep to traverse the file structure.&lt;/p&gt;

&lt;p&gt;I did not &lt;em&gt;intend&lt;/em&gt; to solve this problem recursively, but it turned out to be the natural solution, as nested for-loops have their limits – this would have been fine if I had been satisfied with hard-coding in the depth of the tree. But no, I wanted the user to determine that, not the coder. (The fact that I am both the user and the coder does not matter – what I want tomorrow may not be what I want today.)&lt;/p&gt;

&lt;p&gt;My biggest fear with recursion is getting stuck in an infinite loop. My habit is to put the kick-out condition [see note below] at the top of the function so that I won’t forget to do it later. Also, when I say habit – it’s been a minute since the last time I wrote a recursive function. If I think about it, it was before I had children, back when I taught computer science to high school students. My own children are now both in high school, and yet this habit came right back to me.&lt;/p&gt;

&lt;p&gt;Satisfied with my solution to the base problem, the next challenge was to figure out how to visually distinguish the files from the directories. And that will be the next post.&lt;/p&gt;

&lt;p&gt;Note: the technical term, which did not come back to me but was easy enough to look up, is &lt;em&gt;base case&lt;/em&gt;.&lt;/p&gt;</content><author><name>louloucodes</name></author><category term="python" /><category term="python" /><category term="challenge" /><category term="project" /><category term="portfolio" /><category term="CLI" /><category term="recursion" /><summary type="html">Application of recursion</summary></entry><entry><title type="html">Directory Tree Generator Challenge</title><link href="http://localhost:4000/python/2020/10/05/Real-Python-Project.html" rel="alternate" type="text/html" title="Directory Tree Generator Challenge" /><published>2020-10-05T00:00:00-04:00</published><updated>2020-10-05T00:00:00-04:00</updated><id>http://localhost:4000/python/2020/10/05/Real-Python-Project</id><content type="html" xml:base="http://localhost:4000/python/2020/10/05/Real-Python-Project.html">&lt;h1 id=&quot;no-longer-a-beginner-snake&quot;&gt;No longer a beginner :snake:&lt;/h1&gt;
&lt;h3 id=&quot;ill-call-myself-an-intermediate-pythonista&quot;&gt;I’ll call myself an intermediate Pythonista&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;www.realpython.com&quot;&gt;Real Python&lt;/a&gt; website has been a go-to resource in my Python journey. I have landed on this page again and again as I google topics from OOP to data structures to pandas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://realpython.com/intermediate-python-project-ideas/&quot;&gt;13 Project Ideas for Intermediate Python Developers&lt;/a&gt; caught my eye. With less than a year of daily Pythoning at work (mostly data science with some development mixed in), could I call myself an intermediate developer?&lt;/p&gt;

&lt;p&gt;The Directory Tree Generator looked like a project that I could actually use in real life – and would be a good challenge, so I went for it.&lt;/p&gt;

&lt;p&gt;My interpretation of the project turned out to have four challenges – not all of which were Python, specifically:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://louloucodes.github.io/python/2020/10/06/Recursive-traversing-directory-structure.html&quot;&gt;Traversing the directory structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Printing to the terminal in color&lt;/li&gt;
  &lt;li&gt;Converting the script into a command line utility&lt;/li&gt;
  &lt;li&gt;Making the script executable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read more about the mini-challenges their respective blog posts, then check out the code in this GitHub repo – it will be my first posted project for my programming portfolio. Such a satisfying feeling to create a command line tool to do just what I want it to do!&lt;/p&gt;</content><author><name>louloucodes</name></author><category term="python" /><category term="python" /><category term="challenge" /><category term="project" /><category term="portfolio" /><category term="CLI" /><category term="recursion" /><summary type="html">No longer a beginner :snake: I’ll call myself an intermediate Pythonista</summary></entry><entry><title type="html">Adventures In Tagging Part 2</title><link href="http://localhost:4000/2020/09/10/Adventures-in-Tagging-Part-2.html" rel="alternate" type="text/html" title="Adventures In Tagging Part 2" /><published>2020-09-10T00:00:00-04:00</published><updated>2020-09-10T00:00:00-04:00</updated><id>http://localhost:4000/2020/09/10/Adventures-in-Tagging-Part-2</id><content type="html" xml:base="http://localhost:4000/2020/09/10/Adventures-in-Tagging-Part-2.html">&lt;p&gt;It turns out that celebrating successful tagging was premature. The links to the tags worked &lt;em&gt;only on my local machine&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There were a couple of wrong turns in my search to find the solution…that I will not record. The final answer came from my husband*. He read the documentation – and it made sense to him. &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/about-github-pages-and-jekyll&quot;&gt;Here is the link to GitHub’s page about approved plug-ins.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key information here is&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;GitHub Pages cannot build sites using unsupported plugins. If you want to use unsupported plugins, generate your site locally and then push your site’s static files to GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll-tagging&lt;/code&gt; plugin supported by GitHub? &lt;strong&gt;No&lt;/strong&gt;, it is not. 
When I build my site locally with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;, the tagging gem generates tag pages in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, from which the pages are served.&lt;/p&gt;

&lt;p&gt;GitHub does NOT serve pages from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; – and there’s no way to get around it. (I shouldn’t say “no way,” rather, no way that I found.)&lt;/p&gt;

&lt;p&gt;The solution is to change my workflow**.&lt;/p&gt;

&lt;h4 id=&quot;workflow-before&quot;&gt;Workflow before:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Write a blog post on my machine.&lt;/li&gt;
  &lt;li&gt;Generate my site locally: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Push changes to the GitHub repo.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;workflow-now&quot;&gt;Workflow now:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Write a blog post on my machine.&lt;/li&gt;
  &lt;li&gt;Generate my site locally: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Replace the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; directory in the home directory with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt; directory from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; (the static files referred to in the quote above).&lt;/li&gt;
  &lt;li&gt;Push changes to the Github repo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will probably end up writing a bash script to automate the workflow, but that will be another blog post.&lt;/p&gt;

&lt;p&gt;Proof of concept: see the tag links below? Click on one of them!&lt;/p&gt;

&lt;p&gt;The * above on husband because this one word does not do justice to all of his roles in my life: mentor, champion, git whisperer, programming wizard, to name just a few. He’s generally awesome.&lt;/p&gt;

&lt;p&gt;I generally avoid the word workflow** because I dislike business jargon, but here it feels meaningful and descriptive.&lt;/p&gt;</content><author><name></name></author><category term="tags" /><category term="ruby" /><category term="jekyll" /><category term="github" /><category term="workflow" /><summary type="html">It turns out that celebrating successful tagging was premature. The links to the tags worked only on my local machine.</summary></entry><entry><title type="html">Adventures In Tagging Part 1</title><link href="http://localhost:4000/2020/09/08/Adventures-in-Tagging-part-1.html" rel="alternate" type="text/html" title="Adventures In Tagging Part 1" /><published>2020-09-08T00:00:00-04:00</published><updated>2020-09-08T00:00:00-04:00</updated><id>http://localhost:4000/2020/09/08/Adventures-in-Tagging-part-1</id><content type="html" xml:base="http://localhost:4000/2020/09/08/Adventures-in-Tagging-part-1.html">&lt;p&gt;The headline is&lt;/p&gt;
&lt;h3 id=&quot;i-got-the-tagging-to-work&quot;&gt;I got the tagging to work!!!&lt;/h3&gt;
&lt;p&gt;Don’t know why I expected tagging to have some sort of easy implementation. Clearly I don’t know what I’m doing!&lt;/p&gt;

&lt;p&gt;Attempts included:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;creating tag pages by hand. Clearly the wrong solution.&lt;/li&gt;
  &lt;li&gt;writing a python script to create tag pages. Turned out to be the wrong solution because (1) the way I wrote it require running the script every time I create a post and (2) the foundation for Jekyll is Ruby.&lt;/li&gt;
  &lt;li&gt;finding the &lt;a href=&quot;https://github.com/pattex/jekyll-tagging&quot;&gt;‘jekyll-tagging’&lt;/a&gt; gem*, blindly following the readme, and getting super frustrated that “it isn’t working!”&lt;/li&gt;
  &lt;li&gt;finding &lt;a href=&quot;https://jameshfisher.com/2019/05/05/how-can-i-add-tags-to-a-jekyll-blog/&quot;&gt;this blog post&lt;/a&gt; and copy-pasting the code. &lt;strong&gt;This was actually &lt;em&gt;almost&lt;/em&gt; there.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;deciding that I should really sit down and understand the code that I had just copy-pasted…never having looked at Ruby before, this was not a 5 minute exercise. Some odd syntax to learn here. I would like to shake James H. Fisher’s hand for writing the tag generating code in the first place.&lt;/li&gt;
  &lt;li&gt;multiple branches in my github repo, and finally one frustrated reset master to at least 10 commits back.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But here I am! I have tags with links that work and pages that have information on them! Hooray! I’m going to bed.&lt;/p&gt;

&lt;p&gt;TIL from * above: There’s an app for that! In Python, there’s a package for that! And now I know that in Ruby, there’s a gem for that!&lt;/p&gt;</content><author><name></name></author><category term="tags" /><category term="ruby" /><category term="git" /><category term="til" /><summary type="html">The headline is I got the tagging to work!!! Don’t know why I expected tagging to have some sort of easy implementation. Clearly I don’t know what I’m doing!</summary></entry><entry><title type="html">Cron Job</title><link href="http://localhost:4000/2020/09/06/Cron_job.html" rel="alternate" type="text/html" title="Cron Job" /><published>2020-09-06T00:00:00-04:00</published><updated>2020-09-06T00:00:00-04:00</updated><id>http://localhost:4000/2020/09/06/Cron_job</id><content type="html" xml:base="http://localhost:4000/2020/09/06/Cron_job.html">&lt;h3 id=&quot;cron-job-how-to-make-my-life-a-little-easier&quot;&gt;Cron Job: how to make my life a little easier&lt;/h3&gt;
&lt;p&gt;I’ve heard “automation” will take jobs away, and that sounds bad. In my job, some tasks are easy enough to do but they take my time and attention away from other, more interesting issues. For me, automation frees up time to get the real work done.&lt;/p&gt;

&lt;p&gt;My first exposure to automating a programming task was AWS Lambda. Instead of running a script every day at noon to create a file to store in an AWS S3 bucket, I programmed a lambda function to do it for me. 
This function is the same as the script I run from my machine plus a “lambda handler” method – akin to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; function – that runs when triggered. For my purposes, the trigger is a time of day. &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-expressions.html&quot;&gt;Read more about scheduling an AWS Lambda here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create the trigger, I used a “cron expression.” Here is an example if you haven’t seen one before. The cron expression to run every day at noon is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 0 12 * * *&lt;/code&gt; There are a zillion sites that explain this, so I will not add to the pool. Instead I direct you to &lt;a href=&quot;https://www.freeformatter.com/cron-expression-generator-quartz.html&quot;&gt;the site I used to figure this out.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what if you don’t want to use AWS to schedule a repeating task? From my own (mine … haha, NOT mine but my company’s) server, I edit a cron table, or “crontab.” To do that, bring up terminal and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt;. &lt;a href=&quot;https://opensource.com/article/17/11/how-use-cron-linux&quot;&gt;This site has more information.&lt;/a&gt; Add your cron expression followed by the path to the executable file that you are scheduling to run. And then…sit around and wait for it to do its job.&lt;/p&gt;

&lt;p&gt;If you don’t want to sit around and wait, test with a cron expression that will trigger in a couple of minutes. For example, if it is 3:19pm and I want to test the execution of my script, I’ll write a cron expression to go off at 3:21 with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21 * * * * *&lt;/code&gt;. As soon as I confirm that it worked, I’ll go back into the crontab and remove the line.&lt;/p&gt;

&lt;p&gt;Note that the executable should create a log! I’ll cover that in another post – separation of concerns and all that.&lt;/p&gt;</content><author><name></name></author><category term="cron" /><category term="schedule" /><category term="automation" /><category term="AWS" /><category term="lambda" /><summary type="html">Cron Job: how to make my life a little easier I’ve heard “automation” will take jobs away, and that sounds bad. In my job, some tasks are easy enough to do but they take my time and attention away from other, more interesting issues. For me, automation frees up time to get the real work done.</summary></entry><entry><title type="html">TIL .join</title><link href="http://localhost:4000/2020/08/31/TIL-join.html" rel="alternate" type="text/html" title="TIL .join" /><published>2020-08-31T00:00:00-04:00</published><updated>2020-08-31T00:00:00-04:00</updated><id>http://localhost:4000/2020/08/31/TIL-join</id><content type="html" xml:base="http://localhost:4000/2020/08/31/TIL-join.html">&lt;h3 id=&quot;code-is-read-more-often-than-it-is-written&quot;&gt;Code is read more often than it is written.&lt;/h3&gt;
&lt;p&gt;Who said it first? Does it matter? It is a point of fact.&lt;/p&gt;

&lt;p&gt;I know my code is inefficient, non-pythonic, and medieval. I know
this even as I write it! And yet I do not know what I do not know.
Until I read someone else’s code – and then I say, “I didn’t 
know you could do that!” and then I put it in my (hand-written)
notes with hearts and stars.&lt;/p&gt;

&lt;p&gt;Today I learned about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.join&lt;/code&gt;. I had a list of email addresses to
turn into a string, with the addresses separated by commas.&lt;/p&gt;

&lt;p&gt;Here is what I was about to do:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;email_str = ''
email_list = [ ... ] # list of email addresses
for i in range(len(email_list)):
    # purposefully leaving off the last address
    email_str += email_list[i] + ', '
email_str += email_list[-1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This…this is old school thinking. A little pythonic thinking
snuck in there with the negative indexing to get the last 
element of the list.&lt;/p&gt;

&lt;p&gt;Then I read a snippet written by a coder I admire…and did a 
double take. What magic is this??? I tried it myself.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;', '.join(email_list)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That’s it. That’s what I needed to do. One line.&lt;/p&gt;

&lt;p&gt;I’m beginning to think
that when there’s some functionality that should exist… it 
already does. Python :snake:, every day I :sparkling_heart: you
a little more.&lt;/p&gt;</content><author><name></name></author><category term="til" /><category term="python" /><summary type="html">Code is read more often than it is written. Who said it first? Does it matter? It is a point of fact.</summary></entry><entry><title type="html">Adventures in Navigation</title><link href="http://localhost:4000/jekyll/2020/08/30/Adventures-in-Navigation.html" rel="alternate" type="text/html" title="Adventures in Navigation" /><published>2020-08-30T00:00:00-04:00</published><updated>2020-08-30T00:00:00-04:00</updated><id>http://localhost:4000/jekyll/2020/08/30/Adventures-in-Navigation</id><content type="html" xml:base="http://localhost:4000/jekyll/2020/08/30/Adventures-in-Navigation.html">&lt;p&gt;Add another item to the list of things that are not so easy for
me: tags. 
Something so straightforward as tagging posts and pages
for content should be easy to implement in a language that touts
itself as easy and accessible.&lt;/p&gt;

&lt;p&gt;For a rank beginner (hi!) this is not so easy. I’ll save my 
misadventures in linking to tags for another post, because the
true subject here is …&lt;/p&gt;
&lt;h3 id=&quot;the-navbar&quot;&gt;The navbar&lt;/h3&gt;
&lt;p&gt;I encountered issues with the navbar in one of my attempts to
create pages for the tags. All of a sudden, the navbar filled 
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag: aws&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag: python&lt;/code&gt; and all of the other tags 
accumulated through my posts.&lt;/p&gt;

&lt;h3 id=&quot;what-is-going-on&quot;&gt;What is going on?&lt;/h3&gt;
&lt;p&gt;Some fumbling around – remember, noob here – led me to the
default (I think?) header.html in the default minima theme. This
is a reusable snippet of html that can be included on any page,
and is conveniently found in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The culprit was here:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...if my_page.title ...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See that? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if my_page.title&lt;/code&gt; meant that every single page that
had a title would appear in the navbar. Doh!&lt;/p&gt;

&lt;h3 id=&quot;my-solution&quot;&gt;My solution&lt;/h3&gt;
&lt;p&gt;I added a flag variable to the pages I want to appear in the 
navbar. Specifically, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about.html&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog.html&lt;/code&gt; (should these
be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt;?), to the front matter:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
navbar: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then I returned to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;header.html&lt;/code&gt; file and changed the 
variable controlling appearance in the header to 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_page.navbar&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;problem-solved&quot;&gt;Problem solved!&lt;/h3&gt;
&lt;p&gt;And now back to the tagging problem…&lt;/p&gt;

&lt;h3 id=&quot;haha&quot;&gt;Haha&lt;/h3&gt;
&lt;p&gt;Also joke’s on me when I attempted to cite the Liquid code, my
server raised an error…so I’ll have to figure that out too.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="jekyll" /><category term="liquid" /><category term="navbar" /><category term="tags" /><summary type="html">Add another item to the list of things that are not so easy for me: tags. Something so straightforward as tagging posts and pages for content should be easy to implement in a language that touts itself as easy and accessible.</summary></entry><entry><title type="html">AWS Lambda error fix</title><link href="http://localhost:4000/server/2020/08/28/AWS-Lambda-Error.html" rel="alternate" type="text/html" title="AWS Lambda error fix" /><published>2020-08-28T00:00:00-04:00</published><updated>2020-08-28T00:00:00-04:00</updated><id>http://localhost:4000/server/2020/08/28/AWS-Lambda-Error</id><content type="html" xml:base="http://localhost:4000/server/2020/08/28/AWS-Lambda-Error.html">&lt;h1 id=&quot;everything-was-rolling-along&quot;&gt;Everything was rolling along…&lt;/h1&gt;
&lt;p&gt;We have a handful of lambda functions running on AWS. Everything was running as it should until this morning.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR: Could not install packages due to an EnvironmentError: [Errno 28] No space left on device&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It was just good luck that I was updating a lambda at the same time that this error showed up and propagated through all our lambdas. I should probably have some sort of alert set up for when this happens.&lt;/p&gt;

&lt;p&gt;Our tech lead figured it out quickly – he referenced &lt;a href=&quot;https://epsagon.com/tools/free-lambda-code-storage-exceeded/&quot;&gt;this page&lt;/a&gt; and made some updates. I triggered the lambda to test it, and all was well.&lt;/p&gt;</content><author><name></name></author><category term="server" /><category term="aws" /><category term="lambda" /><category term="error" /><category term="env" /><category term="tip" /><summary type="html">Everything was rolling along… We have a handful of lambda functions running on AWS. Everything was running as it should until this morning.</summary></entry></feed>